burrito
=======

Burrito wraps up all javascript expressions in a trace function before executing
them.

This is super useful if you want to roll your own stack traces or build a code
coverage tool.

examples
========

wrap
----

examples/wrap.js

````javascript
var burrito = require('burrito');

var src = burrito('f() && g(h())\nfoo()', function (node) {
    if (node.name === 'call') node.wrap('qqq(%s)');
});

console.log(src);
````

output:

    qqq(f()) && qqq(g(qqq(h())));

    qqq(foo());

methods
=======

    var burrito = require('burrito');

burrito(code, cb)
-----------------

Given some source `code` and a function `trace`, walk the ast by expression.

The `cb` gets called with a node object described below.

node object
===========

node.name
---------

Name is a string that contains the type of the expression generated by uglify.

Here are all possible names:

node.
--------

installation
============

With [npm](http://npmjs.org) you can just:

    npm install burrito

kudos
=====

Heavily inspired by (and previously mostly lifted outright from) isaacs's nifty
tmp/instrument.js thingy from uglify-js.
